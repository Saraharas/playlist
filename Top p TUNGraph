import os
import sys
import sqlite3
from snap import *
from collections import defaultdict

percget = 0.5
num = 0
G1 = TUNGraph.New()

conn = sqlite3.connect("lastfm_similars.db")
sql = "SELECT tid, target FROM similars_src LIMIT 10000"
res = conn.execute(sql)
alldata = res.fetchall()

# create mapping dt from name to node id
dt = {}
w = []; pp = []
for data in alldata:
    tup = []
    target =  data[1]
    pc = target.split(",")
    dt[data[0]] = num
    pp.append(data[0])
    num += 1
    for i in range(0,len(pc),2):
	tup.append((float(pc[i+1]),pc[i]))
        dt[pc[i]] = num
        num += 1
    ss = sorted(tup, reverse=True)[:int(len(tup)*percget)]
    w.append(ss)

pairs = zip(pp, w)

# create nodes
idToName = {}
for key, val in dt.iteritems():
    G1.AddNode(val)
    idToName[val] = key

# create edges
for x,y in pairs:
    srcid = dt[x]    
    for a in y:
        destid = dt[a[1]]
        G1.AddEdge(srcid, destid)

print "Graph loaded"

# two algorithm for community detection
CmtyV = TCnComV()
#modularity = CommunityCNM(G1, CmtyV)
modularity = CommunityGirvanNewman(G1, CmtyV)
for Cmty in CmtyV:
    print "Community: "
    for NI in Cmty:
        print NI
print "The modularity of the network is %f" % modularity
